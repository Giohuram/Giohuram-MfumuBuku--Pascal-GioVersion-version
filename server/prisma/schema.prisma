generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models/User.model.prisma
enum SchoolLevel {
  Creche
  Maternelle
  Primaire
}

model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique
  password     String
  parentName   String
  childAge     Int      
  schoolLevel  SchoolLevel
  email        String     @unique
  avatar       String?     
  createdAt    DateTime   @default(now())
  verified     Boolean    @default(false)
  // definir un champ favori de type boucle pour définir les favoris... c 1-to-many and many-to-many relationship voir github Michel 
  // Relation avec BookUser
  books        BookUser[]
  // Relation avec ReadingHistory
  readingHistory ReadingHistory[]
  // Relation avec Subscription
  subscriptions Subscription[]
  // Relation avec ParentalControl
  parentalControl ParentalControl[]
}


// models/Book.model.prisma
model Book {
  id            Int      @id @default(autoincrement())
  title         String
  author        String
  content       String    // Champ pour stocker le contenu EPUB du livre
  category      String 
  datePublished DateTime
  bookCover     String
  audioContent  String?   // Nouvelle propriété pour le contenu audio du livre
  age           String?   // Nouvelle propriété pour l'âge approprié du livre
  description   String?
  // Relation avec BookUser
  users         BookUser[]
  // Relation avec ReadingHistory
  readingHistory ReadingHistory[]
}



// Relation pour représenter les utilisateurs qui ont sélectionné ce livre
model BookUser {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   Int
  addedAt  DateTime @default(now())
}



// models/Subscription.model.prisma
model Subscription {
  id           Int      @id @default(autoincrement())
  userId       Int
  type         String   // mensuel / annuel
  startDate    DateTime @default(now())
  endDate      DateTime
  // Ajoutez d'autres champs d'abonnement selon vos besoins
  user         User     @relation(fields: [userId], references: [id])
}

// models/ReadingHistory.model.prisma
// model ReadingHistory {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   bookId    Int
//   readDate  DateTime @default(now())
//   preferredCategory String
//   readingLevel     String // débutant / intermédiaire / avancé
//   // Ajoutez d'autres champs pour l'historique de lecture selon vos besoins
//   user      User     @relation(fields: [userId], references: [id])
//   book      Book     @relation(fields: [bookId], references: [id])
// }

// // models/UserPreferences.model.prisma
// model UserPreferences {
//   id              Int      @id @default(autoincrement())
//   userId          Int
//   preferredLanguage String
//   preferredCategory String
//   readingLevel     String // débutant / intermédiaire / avancé
//   // Relation avec User
//   user             User     @relation(fields: [userId], references: [id])
// }


model ParentalControl {
  id               Int      @id @default(autoincrement())
  userId           Int
  isEnabled        Boolean  @default(false)
  allowedStartTime DateTime
  allowedEndTime   DateTime
  createdAt        DateTime @default(now())
  // Relation avec User
  user             User     @relation(fields: [userId], references: [id])
}

// models/ReadingHistory.model.prisma

model ReadingHistory {
  id              Int      @id @default(autoincrement())
  userId          Int
  bookId          Int
  readDate        DateTime @default(now())
  preferredCategory String
  readingLevel     String // débutant / intermédiaire / avancé
  lastPageRead    Int?    // Nouvelle propriété pour la dernière page lue
  user            User     @relation(fields: [userId], references: [id])
  book            Book     @relation(fields: [bookId], references: [id])
}
